public class InsertionSort
{
    public static void insertionSort(int [] a){
        for (int x = 0; x < a.length; x++){ 
            int aux;                         
            for(int y = a.length-1; y > x ; y--){  
                if(a[y]<a[x]){   
                    aux = a[y]; 
                    a[y]=a[x];            
                    a[x]=aux;              
                }
            }
        }
        //for (int x = 0; x< a.length; x++){
          //  System.out.print(a[x]+ " ");
        //}
    }

    public static void main(String[] args){
        for (int i = 1000; i <= 20000; i = i + 1000){
            int[] a = new int[i];
            for (int j = 0; j < i; j++ ){
                int x = (int) (Math.random() * i);
                a[j] = x;
            }
            long start = System.currentTimeMillis();
            insertionSort(a);
            long fin = System.currentTimeMillis();       
            System.out.println(fin-start);
        }
    }
}


public class MergeSort
{
    public static void mergesort(int A[],int izq, int der){
        if (izq<der){
            int m=(izq+der)/2;
            mergesort(A,izq, m);
            mergesort(A,m+1, der);
            merge(A,izq, m, der);
        }
    }

    public static void merge(int A[],int izq, int m, int der){
        int i, j, k;
        int [] B = new int[A.length]; //array auxiliar
        for (i=izq; i<=der; i++) //copia ambas mitades en el array auxiliar
            B[i]=A[i];

        i=izq; j=m+1; k=izq;
        while (i<=m && j<=der) //copia el siguiente elemento mÃ¡s grande
            if (B[i]<=B[j])
                A[k++]=B[i++];
            else
                A[k++]=B[j++];
        while (i<=m) //copia los elementos que quedan de la
            A[k++]=B[i++]; //primera mitad (si los hay)
    }

    public static void main(String[] args){
        for (int i = 1000; i <= 20000; i = i + 1000){
            int[] a = new int[i];
            for (int j = 0; j < i; j++ ){
                int x = (int) (Math.random() * i);
                a[j] = x;
            }
            long start = System.currentTimeMillis();
            mergesort(a,0,a.length-1);
            long fin = System.currentTimeMillis();       
            System.out.println(fin-start);
        }
    }
}
